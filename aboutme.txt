EXPERIMENT NO 2:
    1. Create a class called Employee that includes three pieces of information as instance
        variables: first name, last name, and monthly salary. Your class should have a constructor
        that initializes the three instance variables. Provide a setter and getter method for each
        instance variable. If the monthly salary is not positive, set it to 0.0. Write a test application
        named EmployeeTest that demonstrates the Employee class's capabilities. Create two
        Employee objects and display each object's yearly salary. Then give each Employee a 10%
        raise and display each Employee's yearly salary again.
    2. Implement a Java program to print the area of a rectangle by creating a class named
        'Area' that has two methods. The first method, named 'setDim', takes the length and breadth
        of the rectangle as parameters. The second method, named 'getArea', returns the area of the
        rectangle. The length and breadth of the rectangle are entered through the keyboard.
    3. Write a Java program to demonstrate the use of static variables, static blocks, and static
        methods.
    4. Write a Java program to implement a stack and a queue.
    5. Write a Java program to arrange 10 names in alphabetical order.

EXPERIMENT NO 3:
    1.​ Write a Java program to create a class known as "BankAccount" with methods called
        deposit() and withdraw(). Create a subclass called SavingsAccount that overrides the
        withdraw() method to prevent withdrawals if the account balance falls below one hundred.
    2.​ Write a Java program that creates a class hierarchy for employees of a company. The base
    class should be Employee, with subclasses Manager, Developer, and Programmer. Each
    subclass should have properties such as name, address, salary, and job title. Implement
    methods for calculating bonuses, generating performance reports, and managing projects.
    3.​ Implement Following:
        a.​ Create abstract class shapes with dim1, dim2 variables and abstract area() method.
        Class
        b.​ rectangle and triangle inherits shape class. Calculate area of rectangle and triangle.
    4.​ Write a program to perform Multilevel Inheritance
    [STUDENT]Roll no -> [TEST]Sub1, sub2 -> [RESULT] display result.